#! /usr/bin/env python
# -*- python -*-

# @header
# ************************************************************************
#
#                PyTrilinos: Python interface to Trilinos
#                   Copyright (2005) Sandia Corporation
#
# Under terms of contract DE-AC04-94AL85000, there is a non-exclusive
# license for use of this work by or on behalf of the U.S. Government.
#
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of the
# license, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of
# merchantability or fitness for a particular purpose.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
# Questions? contact Bill Spotz (wfspotz@sandia.gov)
#
# ************************************************************************
# @header

# This example creates a (distributed) tridiagonal matrix, a vector for the
# solution and one for the right-handi. Then, it solves the corresponding
# linear system using Amesos' LAPACK. Note, however, that any Amesos supported
# (and enabled at configure time) solver can be adopted; simply change the
# value of the variable `Type'
#
# Last updated on 25-Jul-5
# Author Marzio Sala, SNL 9214

#
# System imports
from   optparse import *
import sys

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-b", "--use-boost", action="store_true", dest="boost",
                  default=False,
                  help="test the experimental boost-generated PyTrilinos package")
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra = fromPyTrilinosImport('Epetra', options.testharness)
Amesos = fromPyTrilinosImport('Amesos', options.testharness)

# dimension of the problem
NumGlobalRows = 10
Comm = Epetra.PyComm()
numProc = Comm.NumProc()
iAmRoot = Comm.MyPID() == 0
Map = Epetra.Map(NumGlobalRows, 0, Comm)
LHS_exact = Epetra.Vector(Map)
LHS = Epetra.Vector(Map)
RHS = Epetra.Vector(Map)
Matrix = Epetra.CrsMatrix(Epetra.Copy, Map, 0)

NumLocalRows = Map.NumMyElements()

# Populates the matrix by inserting one row at-a-time. Indices and Values
# are defined as Python's lists (of the same length).
for ii in range(0, NumLocalRows):
  i = Map.GID(ii)
  if i == 0:
    Indices = [i, i + 1]
    Values  = [2.0, -1.0]
  elif i == NumGlobalRows - 1:
    Indices = [i, i - 1]
    Values  = [2.0, -1.0]
  else:
    Indices = [  i,  i - 1, i + 1]
    Values  = [2.0,   -1.0,  -1.0]
  Matrix.InsertGlobalValues(i, Values, Indices)
ierr = Matrix.FillComplete()

# Builds a solution that is `i' at node `i', then the
# corresponding right-hand side, then set the solution to 0
for i in range(0, NumLocalRows):
  LHS[i] = i
Matrix.Multiply(False, LHS, RHS)
LHS.PutScalar(0.0)

Problem = Epetra.LinearProblem(Matrix, LHS, RHS)
Factory = Amesos.Factory()

# Creates the solver using the Amesos' factory
Type = "Amesos_Lapack"
if Factory.Query(Type) == False:
  print "Selected solver (%s) not supported" % (Type)
  Epetra.Finalize()
  raise "Solver not supported"
Solver = Factory.Create(Type, Problem)

# Setting parameters using a Python' dictionary. The list of supported
# parameters can be found on the user's guide.
AmesosList = {"PrintTiming" : True,
              "PrintStatus" : True
              }
Solver.SetParameters(AmesosList)

# Note: we don't check here the return parameters for brevity. 
Solver.SymbolicFactorization()
Solver.NumericFactorization()
Solver.Solve()

del Solver

error = 0.0
for i in range(0, NumLocalRows):
  error = error + abs(LHS[i] - i)
if iAmRoot:
  print "Using %s, ||x - x_ex||_1 = %e" % (Type, error)

# Exit with a code that indicates the total number of successes
successes = Comm.SumAll(1)
if successes == numProc and iAmRoot: print "End Result: TEST PASSED"
sys.exit(numProc-successes)
