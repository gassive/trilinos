# -*- python -*-
#
# Define the class factory function
def typed_tuple(elementType):
    # These functions will be returned as class methods
    def new(cls, *args):
        return tuple.__new__(cls, args)
    def init(self, *args):
        for it in self:
            if not isinstance(it, self.elementType):
                raise TypeError, 'elements must be of type "%s", but received %s' \
                      % (self.elementType.__name__, str(type(it)))
    # Class name
    name = 'tuple_of_' + elementType.__name__
    # Class docstring
    doc = '%s([arg1 [, arg2 ...]])\n\n' \
          'a tuple whose elements are type-checked to ensure that they\n' \
          'are of type "%s"' 
    doc = doc % (name, elementType.__name__)
    # Class members
    members = dict(__doc__     = doc,
                   elementType = elementType,
                   __new__     = new,
                   __init__    = init)
    # Return the manufactured class
    return type(name, (tuple,), members)

#
# Create a series of typed tuple classes for each of the standard python types
tuple_of_bool  = typed_tuple(bool )
tuple_of_int   = typed_tuple(int  )
tuple_of_float = typed_tuple(float)
tuple_of_str   = typed_tuple(str  )
tuple_of_tuple = typed_tuple(tuple)
tuple_of_list  = typed_tuple(list )
tuple_of_dict  = typed_tuple(dict )
