#====================================================================
# ------------------------
# | CVS File Information |
# ------------------------
#
# $RCSfile$
#
# $Author$
#
# $Date$
#
# $Revision$
#
# $Name$
#====================================================================

#
# List of supported targets for build.
SUPP_TARG1="sgi sgin32 sgim4 sgi10k alpha sp2 sun tflop_fe hp gcc sol"
SUPP_TARGS="$(SUPP_TARG1)"

# Executable name
EXE_NAME = nem_slice

# Used for linting source on SGI
LINTOUT=sgilint.out

# Directories containing source code
SUB_VPATH = ..

# Root directory of architecture dependent files.
ROOT_ARCHD = /projects/seacas/current64

# Location of Obj_* directories
TARG_DIR = .

# Global defines
GLOB_DEFS=-DDEBUG -DPRINT_INFO -DTIMEIT

# Global libraries
GLOB_LIBS=-lnemIc -lexoIIv2c -lnetcdf -lchaco -lm -lzoltan -lmpi

# Global include directories
GLOB_INC=-I..

#
# List of C source code files.
ELB_CSRC = elb_main.c		elb_err.c		elb_util.c \
	   elb_inp.c		elb_exo_util.c		elb_allo.c \
	   elb_graph.c		elb_elem.c		elb_time.c \
	   elb_loadbal.c	elb_output.c		elb_groups.c \
	   add_to_log.c

#
# List of include files.
ELB_INCS = elb_const.h		elb_err_const.h		elb_inp_const.h \
	   elb_util_const.h	elb_exo_const.h		elb_allo_const.h \
	   elb_graph_const.h	elb_elem_const.h	elb_loadbal_const.h \
	   elb_output_const.h	elb_groups_const.h

#
# Compiler defines for a generic GCC compiler
#GCC_CC		= gcc
#GCC_CC		= mpicc
GCC_CC		= gcc  -I/Net/local/mpi/include \
                          -I/Net/local/mpi/build/solaris/ch_p4/include
GCC_DBG_FLAGS	= -g
GCC_OPT_FLAGS   = -O

GCC_SRC		= $(ELB_CSRC)
GCC_OBJS	= $(GCC_SRC:.c=.o)

#GCC_ARCHD	= $(ROOT_ARCHD)/gcc
GCC_ARCHD	= $(ROOT_ARCHD)
GCC_INC_PATH	= -I$(GCC_ARCHD)/include $(GLOB_INC) -I/home/u/kddevin/pub/Zoltan_2.0/Zoltan/include
GCC_LIB_PATH	= -L/home/u/kddevin/code/nem_slice_gruda/chaco -L$(GCC_ARCHD)/lib -L/home/u/kddevin/pub/Zoltan_2.0/Zoltan/Obj_gcc -L/Net/local/mpi/build/solaris/ch_p4/lib \
                  -L/Net/local/gnu/lib/gcc-lib/sparc-sun-solaris2.8/3.2.1


GCC_LIBS	= $(GCC_LIB_PATH) $(GLOB_LIBS)  -lpmpich -lmpich -lsocket -lnsl -laio -lgcc

#GCC_CCOMP	= $(GCC_CC) $(GCC_INC_PATH) $(GCC_OPT_FLAGS)
GCC_CCOMP	= $(GCC_CC) $(GCC_INC_PATH) $(GCC_DBG_FLAGS)

GCC_DEFS	= $(GLOB_DEFS)

#
# Compiler defines for solaris target. ansi cc
SOL_CC          = cc
SOL_DBG_FLAGS   = -g
SOL_OPT_FLAGS   = -O

SOL_SRC         = $(ELB_CSRC)
SOL_OBJS        = $(SOL_SRC:.c=.o)

SOL_ARCHD       = $(ROOT_ARCHD)/solaris
SOL_INC_PATH    = -I$(SOL_ARCHD)/include $(GLOB_INC)
SOL_LIB_PATH    = -L$(SOL_ARCHD)/lib

SOL_LIBS        = $(SOL_LIB_PATH) $(GLOB_LIBS)

SOL_CCOMP       = $(SOL_CC) $(SOL_INC_PATH) $(SOL_OPT_FLAGS)

SOL_DEFS        = $(GLOB_DEFS)

#
# Compiler defines for SunOS with Sun ANSI C compiler
SUN_CC		= acc-2.0.1
SUN_DBG_FLAGS	= -g
SUN_OPT_FLAGS	= -O

SUN_SRC		= $(ELB_CSRC)
SUN_OBJS	= $(SUN_SRC:.c=.o)

SUN_ARCHD	= $(ROOT_ARCHD)/sun
SUN_INC_PATH	= -I$(SUN_ARCHD)/include $(GLOB_INC)
SUN_LIB_PATH	= -L$(SUN_ARCHD)/lib

SUN_LIBS	= $(SUN_LIB_PATH) $(GLOB_LIBS)

SUN_CCOMP	= $(SUN_CC) $(SUN_INC_PATH) $(SUN_OPT_FLAGS)

SUN_Q_CCOMP	= quantify $(SUN_CC) $(SUN_INC_PATH) $(SUN_DBG_FLAGS)
SUN_PC_CCOMP	= purecov $(SUN_CC) $(SUN_INC_PATH) $(SUN_DBG_FLAGS)

SUN_DEFS	= $(GLOB_DEFS)

#
# Compiler defines for SGI running IRIX
#SGI_CC		= cc -mips2
SGI_CC		= cc -64
SGI_DBG_FLAGS	= -g
SGI_OPT_FLAGS	= -O

SGI_SRC		= $(ELB_CSRC)
SGI_OBJS	= $(SGI_SRC:.c=.o)

#SGI_ARCHD	= $(ROOT_ARCHD)/sgi
SGI_ARCHD	= $(ROOT_ARCHD)
SGI_INC_PATH	= -I$(SGI_ARCHD)/include -I$(SGI_ARCHD)/inc $(GLOB_INC) -I/home/kddevin/Zoltan_2.0/include
SGI_LIB_PATH	= -L/usr/lib64 -L$(SGI_ARCHD)/lib -L/home/kddevin/Zoltan_2.0/Obj_sgi64

SGI_LIBS	= $(SGI_LIB_PATH) $(GLOB_LIBS)

SGI_CCOMP	= $(SGI_CC) $(SGI_INC_PATH) $(SGI_OPT_FLAGS)

SGI_DEFS	= $(GLOB_DEFS)

#
# Compiler defines for HP with HP ANSI C compiler
#
HP_CC		= cc -Aa
HP_DBG_FLAGS	= -g -y
HP_OPT_FLAGS	= -O

HP_SRC		= $(ELB_CSRC)
HP_OBJS		= $(HP_SRC:.c=.o)

HP_ARCHD	= /r2/arch/hp
HP_INC_PATH	= -I$(HP_ARCHD)/include $(GLOB_INC)
HP_LIB_PATH	= -L$(HP_ARCHD)/lib

HP_LIBS		= $(HP_LIB_PATH) $(GLOB_LIBS)

HP_CCOMP	= $(HP_CC) $(HP_INC_PATH) $(HP_OPT_FLAGS)

HP_DEFS		= -Aa -D_HPUX_SOURCE -DNO_GETRUSAGE $(GLOB_DEFS)

#
# Compiler defines for SGI mips4 running IRIX
SGIM4_CC	= cc -64 -mips4
SGIM4_DBG_FLAGS	= -g
SGIM4_OPT_FLAGS	= -O

SGIM4_SRC	= $(ELB_CSRC)
SGIM4_OBJS	= $(SGIM4_SRC:.c=.o)

SGIM4_ARCHD	= $(ROOT_ARCHD)/sgim4
SGIM4_INC_PATH	= -I$(SGIM4_ARCHD)/include $(GLOB_INC)
SGIM4_LIB_PATH	= -L$(SGIM4_ARCHD)/lib

SGIM4_LIBS	= $(SGIM4_LIB_PATH) $(GLOB_LIBS)

SGIM4_CCOMP	= $(SGIM4_CC) $(SGIM4_INC_PATH) $(SGI_OPT_FLAGS)

SGIM4_DEFS	= $(GLOB_DEFS)

#
# Compiler defines for SGI R10K
SGI10K_CC		= cc -64 -r10000
SGI10K_DBG_FLAGS	= -g
SGI10K_OPT_FLAGS	= -O

SGI10K_SRC		= $(ELB_CSRC)
SGI10K_OBJS		= $(SGI10K_SRC:.c=.o)

SGI10K_ARCHD		= $(ROOT_ARCHD)/sgi10k
SGI10K_INC_PATH		= -I$(SGI10K_ARCHD)/include $(GLOB_INC)
SGI10K_LIB_PATH		= -L$(SGI10K_ARCHD)/lib

SGI10K_LIBS		= $(SGI10K_LIB_PATH) $(GLOB_LIBS)

SGI10K_CCOMP		= $(SGI10K_CC) $(SGI10K_INC_PATH) $(SGI10K_OPT_FLAGS)

SGI10K_DEFS		= -DSGI10K $(GLOB_DEFS)

#
# Compiler defines for 32bit binary on SGI 64bit OS
SGIN32_CC		= cc -n32
SGIN32_DBG_FLAGS	= -g
SGIN32_OPT_FLAGS	= -O

SGIN32_SRC		= $(ELB_CSRC)
SGIN32_OBJS		= $(SGIN32_SRC:.c=.o)

SGIN32_ARCHD		= $(ROOT_ARCHD)/sgin32
SGIN32_INC_PATH		= -I$(SGIN32_ARCHD)/include $(GLOB_INC)
SGIN32_LIB_PATH		= -L$(SGIN32_ARCHD)/lib

SGIN32_LIBS		= $(SGIN32_LIB_PATH) $(GLOB_LIBS)

SGIN32_CCOMP		= $(SGIN32_CC) $(SGIN32_INC_PATH) $(SGIN32_OPT_FLAGS)

SGIN32_DEFS		= $(GLOB_DEFS)

#
# Compiler defines for DEC Alpha
ALPHA_CC		= cc
ALPHA_DBG_FLAGS		= -g
ALPHA_OPT_FLAGS		= -O

ALPHA_SRC		= $(ELB_CSRC)
ALPHA_OBJS		= $(ALPHA_SRC:.c=.o)

ALPHA_ARCHD		= $(ROOT_ARCHD)/alpha
ALPHA_INC_PATH		= -I$(ALPHA_ARCHD)/include $(GLOB_INC)
ALPHA_LIB_PATH		= -L$(ALPHA_ARCHD)/lib

ALPHA_LIBS		= $(ALPHA_LIB_PATH) $(GLOB_LIBS)

ALPHA_CCOMP		= $(ALPHA_CC) $(ALPHA_INC_PATH) $(ALPHA_OPT_FLAGS)

ALPHA_DEFS		= $(GLOB_DEFS)

#
# Compiler defines for service partition on the teraflop
TFLOP_FE_CC		= cc
TFLOP_FE_DBG_FLAGS	= -g
TFLOP_FE_OPT_FLAGS	= -O

TFLOP_FE_SRC		= $(ELB_CSRC) md_getsubopt.c
TFLOP_FE_OBJS		= $(TFLOP_FE_SRC:.c=.o)

TFLOP_FE_ARCHD		= $(ROOT_ARCHD)/tflop_fe
TFLOP_FE_INC_PATH	= -I$(TFLOP_FE_ARCHD)/include $(GLOB_INC)
TFLOP_FE_LIB_PATH	= -L$(TFLOP_FE_ARCHD)/lib

TFLOP_FE_LIBS		= $(TFLOP_FE_LIB_PATH) $(GLOB_LIBS) -lrpc

TFLOP_FE_CCOMP		= $(TFLOP_FE_CC) $(TFLOP_FE_INC_PATH) \
			  $(TFLOP_FE_OPT_FLAGS)

TFLOP_FE_DEFS		= $(GLOB_DEFS)

#
# Compiler defines for SP2
SP2_CC		= xlc
SP2_DBG_FLAGS	= -g
SP2_OPT_FLAGS	= -O

SP2_SRC		= $(ELB_CSRC)
SP2_OBJS	= $(SP2_SRC:.c=.o)

SP2_ARCHD	= $(ROOT_ARCHD)/sp2
SP2_INC_PATH	= -I$(SP2_ARCHD)/include $(GLOB_INC)
SP2_LIB_PATH	= -L$(SP2_ARCHD)/lib

SP2_LIBS	= $(SP2_LIB_PATH) $(GLOB_LIBS)

SP2_CCOMP	= $(SP2_CC) $(SP2_INC_PATH) $(SP2_OPT_FLAGS)

SP2_DEFS	= $(GLOB_DEFS)


# Begin targets.
default:
	@echo " "
	@echo "usage: make <target>"
	@echo "where target is one of:"
	@for targ in ${SUPP_TARGS}; \
	do echo "  $$targ"; \
	done
	@echo " "

sgi:
	@echo "building $(EXE_NAME) for SGI..."
	@if [ ! -d Obj_sgi ]; \
	then mkdir Obj_sgi; \
	fi
	@rm -f Obj_sgi/Makefile
	@cp Makefile_sub Obj_sgi/Makefile
	@cd Obj_sgi; \
	$(MAKE) $(EXE_NAME) "CC=$(SGI_CCOMP)" "TARGET=$(EXE_NAME)" \
	"OBJS=$(SGI_OBJS)" "VPATH=$(SUB_VPATH)" \
	"DEFS=$(SGI_DEFS)" \
	"INCS=$(SGI_INC_PATH)" \
	"LIBS=$(SGI_LIBS)"

sgim4:
	@echo "building $(EXE_NAME) for SGIM4..."
	@if [ ! -d Obj_sgim4 ]; \
	then mkdir Obj_sgim4; \
	fi
	@rm -f Obj_sgim4/Makefile
	@cp Makefile_sub Obj_sgim4/Makefile
	@cd Obj_sgim4; \
	$(MAKE) $(EXE_NAME) "CC=$(SGIM4_CCOMP)" "TARGET=$(EXE_NAME)" \
	"OBJS=$(SGIM4_OBJS)" "VPATH=$(SUB_VPATH)" \
	"DEFS=$(SGIM4_DEFS)" \
	"INCS=$(SGIM4_INC_PATH)" \
	"LIBS=$(SGIM4_LIBS)"

sgi10k:
	@echo "building $(EXE_NAME) for SGI10K..."
	@if [ ! -d Obj_sgi10k ]; \
	then mkdir Obj_sgi10k; \
	fi
	@rm -f Obj_sgi10k/Makefile
	@cp Makefile_sub Obj_sgi10k/Makefile
	@cd Obj_sgi10k; \
	$(MAKE) $(EXE_NAME) "CC=$(SGI10K_CCOMP)" "TARGET=$(EXE_NAME)" \
	"OBJS=$(SGI10K_OBJS)" "VPATH=$(SUB_VPATH)" \
	"DEFS=$(SGI10K_DEFS)" \
	"INCS=$(SGI10K_INC_PATH)" \
	"LIBS=$(SGI10K_LIBS)"

sgin32:
	@echo "building $(EXE_NAME) for SGIN32..."
	@if [ ! -d Obj_sgin32 ]; \
	then mkdir Obj_sgin32; \
	fi
	@rm -f Obj_sgin32/Makefile
	@cp Makefile_sub Obj_sgin32/Makefile
	@cd Obj_sgin32; \
	$(MAKE) $(EXE_NAME) "CC=$(SGIN32_CCOMP)" "TARGET=$(EXE_NAME)" \
	"OBJS=$(SGIN32_OBJS)" "VPATH=$(SUB_VPATH)" \
	"DEFS=$(SGIN32_DEFS)" \
	"INCS=$(SGIN32_INC_PATH)" \
	"LIBS=$(SGIN32_LIBS)"

alpha:
	@echo "building $(EXE_NAME) for ALPHA..."
	@if [ ! -d Obj_alpha ]; \
	then mkdir Obj_alpha; \
	fi
	@rm -f Obj_alpha/Makefile
	@cp Makefile_sub Obj_alpha/Makefile
	@cd Obj_alpha; \
	$(MAKE) $(EXE_NAME) "CC=$(ALPHA_CCOMP)" "TARGET=$(EXE_NAME)" \
	"OBJS=$(ALPHA_OBJS)" "VPATH=$(SUB_VPATH)" \
	"DEFS=$(ALPHA_DEFS)" \
	"INCS=$(ALPHA_INC_PATH)" \
	"LIBS=$(ALPHA_LIBS)"

gcc:
	@echo "building $(EXE_NAME) with GCC..."
	@if [ ! -d Obj_gcc ]; \
	then mkdir Obj_gcc; \
	fi
	@rm -f Obj_gcc/Makefile
	@cp Makefile_sub Obj_gcc/Makefile
	@cd Obj_gcc; \
	$(MAKE) $(EXE_NAME) "CC=$(GCC_CCOMP)" "TARGET=$(EXE_NAME)" \
	"OBJS=$(GCC_OBJS)" "VPATH=$(SUB_VPATH)" \
	"DEFS=$(GCC_DEFS)" \
	"INCS=$(GCC_INC_PATH)" \
	"LIBS=$(GCC_LIBS)"

sol:
	@echo "building $(EXE_NAME) for Solaris..."
	@if [ ! -d Obj_sol ]; \
	then mkdir Obj_sol; \
	fi
	@rm -f Obj_sol/Makefile
	@cp Makefile_sub Obj_sol/Makefile
	@cd Obj_sol; \
	$(MAKE) $(EXE_NAME) "CC=$(SOL_CCOMP)" "TARGET=$(EXE_NAME)" \
	"OBJS=$(SOL_OBJS)" "VPATH=$(SUB_VPATH)" \
	"DEFS=$(SOL_DEFS)" \
	"INCS=$(SOL_INC_PATH)" \
	"LIBS=$(SOL_LIBS)"

sun:
	@echo "building $(EXE_NAME) for SunOS..."
	@if [ ! -d Obj_sun ]; \
	then mkdir Obj_sun; \
	fi
	@rm -f Obj_sun/Makefile
	@cp Makefile_sub Obj_sun/Makefile
	@cd Obj_sun; \
	$(MAKE) $(EXE_NAME) "CC=$(SUN_CCOMP)" "TARGET=$(EXE_NAME)" \
	"OBJS=$(SUN_OBJS)" "VPATH=$(SUB_VPATH)" \
	"DEFS=$(SUN_DEFS)" \
	"INCS=$(SUN_INC_PATH)" \
	"LIBS=$(SUN_LIBS)"

sun_quantify:
	@echo "building $(EXE_NAME) for SunOS with Quantify..."
	@if [ ! -d Obj_sun_quantify ]; \
	then mkdir Obj_sun_quantify; \
	fi
	@rm -f Obj_sun_quantify/Makefile
	@cp Makefile_sub Obj_sun_quantify/Makefile
	@cd Obj_sun_quantify; \
	$(MAKE) $(EXE_NAME) "CC=$(SUN_Q_CCOMP)" "TARGET=$(EXE_NAME)" \
	"OBJS=$(SUN_OBJS)" "VPATH=$(SUB_VPATH)" \
	"DEFS=$(SUN_DEFS)" \
	"INCS=$(SUN_INC_PATH)" \
	"LIBS=$(SUN_LIBS)"

sun_purecov:
	@echo "building $(EXE_NAME) for SunOS with PureCoverage..."
	@if [ ! -d Obj_sun_purecov ]; \
	then mkdir Obj_sun_purecov; \
	fi
	@rm -f Obj_sun_purecov/Makefile
	@cp Makefile_sub Obj_sun_purecov/Makefile
	@cd Obj_sun_purecov; \
	$(MAKE) $(EXE_NAME) "CC=$(SUN_PC_CCOMP)" "TARGET=$(EXE_NAME)" \
	"OBJS=$(SUN_OBJS)" "VPATH=$(SUB_VPATH)" \
	"DEFS=$(SUN_DEFS)" \
	"INCS=$(SUN_INC_PATH)" \
	"LIBS=$(SUN_LIBS)"

hp:
	@echo "building $(EXE_NAME) for HPUX..."
	@if [ ! -d Obj_hp ]; \
	then mkdir Obj_hp; \
	fi
	@rm -f Obj_hp/Makefile
	@cp Makefile_sub Obj_hp/Makefile
	@cd Obj_hp; \
	$(MAKE) $(EXE_NAME) "CC=$(HP_CCOMP)" "TARGET=$(EXE_NAME)" \
	"OBJS=$(HP_OBJS)" "VPATH=$(SUB_VPATH)" \
	"DEFS=$(HP_DEFS)" \
	"INCS=$(HP_INC_PATH)" \
	"LIBS=$(HP_LIBS)"

tflop_fe:
	@echo "building $(EXE_NAME) for TFLOP_FE..."
	@if [ ! -d Obj_tflop_fe ]; \
	then mkdir Obj_tflop_fe; \
	fi
	@rm -f Obj_tflop_fe/Makefile
	@cp Makefile_sub Obj_tflop_fe/Makefile
	@cd Obj_tflop_fe; \
	$(MAKE) $(EXE_NAME) "CC=$(TFLOP_FE_CCOMP)" "TARGET=$(EXE_NAME)" \
	"OBJS=$(TFLOP_FE_OBJS)" "VPATH=.." \
	"DEFS=$(DEFINES) $(TFLOP_FE_DEFS)" \
	"INCS=$(TFLOP_FE_INC_PATH)" \
	"LIBS=$(TFLOP_FE_LIBS)"

sp2:
	@echo "building $(EXE_NAME) for SP2..."
	@if [ ! -d Obj_sp2 ]; \
	then mkdir Obj_sp2; \
	fi
	@rm -f Obj_sp2/Makefile
	@cp Makefile_sub Obj_sp2/Makefile
	@(cd Obj_sp2; \
	$(MAKE) $(EXE_NAME) "CC=$(SP2_CCOMP)" "TARGET=$(EXE_NAME)" \
        "OBJS=$(SP2_OBJS)" "VPATH=$(SUB_VPATH)" \
        "DEFS=$(SP2_DEFS)" \
        "INCS=$(SP2_INC_PATH)" \
        "LIBS=$(SP2_LIBS)";)

sgilint:
	@echo "linting source to file $(LINTOUT)..."
	@lint $(DEFINES) -I$(GLOB_INC) -I$(SGI_ARCHD)/include -DTIMEIT $(C_SRC) > $(LINTOUT)
